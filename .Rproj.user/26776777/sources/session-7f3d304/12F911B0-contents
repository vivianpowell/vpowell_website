---
title: "Spatial Mapping with the SF Package"
author: "Erin Franke and Vivian Powell"
output: 
  html_document:
    toc: true
    toc_depth: 2

---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Learning Objectives

This learning guide will introduce to the [**sf: Simple Features for R**](https://cran.r-project.org/web/packages/sf/index.html) package. We will cover: \

- The basic notation of plotting with sf \
- How to make a chloropleth map \
- How to overlay and crop different shape files on a single map \
- How to join spatial data frames 
- How to aggregate points a desired spatial polygon (census tract, county, state, etc) \
- How to customize your sf map with labels and colors

# Concepts 

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(dplyr)
library(sf)
library(tidycensus)
library(USAboundaries) 
library(classInt)
library(ggspatial)
```

### A basic map (notation)

This section will cover the basics of creating and understanding point, line, and polygon maps with the sf package. 

#### Intro to vector data

It's important to understand what type of spatial data you're working with, and what your goals are for your map. Most spatial data takes the form of vector data, meaning it is made up of either points, lines, polygons, or other geometries, in more complex situations. For example, city locations are usually be represented with points, roads are represented with lines, and country, state, or county boundaries are represented with polygons. Each layer on your map will have one specific type of geometry, and you can layer these in the order that makes sense for your map. 

#### Understanding sf notation

Sf stands for "simple features" which is a standardized way to store and interpret spatial data. In R, the sf package is really nice because it integrates spatial operations with tidyverse notation and is pretty easy to learn and use.

In R, sf data are simply data frames or tibbles, with the addition of a "geometry" column. The geometry column contains all the spatial information that you need in order to make a map layer. You'll notice that the entries in the geometry column will tell you what type of data (point, line, polygon, etc) you're working with.

Let's load some data so we can look at the format.

#### Load the data

Make sure you've downloaded the entire activity folder from Google Drive and extracted the zipfile before attempting to load the data!

```{r}
mn_cities <- read_sf('shp_loc_pop_centers')
```

After running the code, open up the data frame in your environment panel. Notice that the "geometry" column contains "POINT" objects. The rest of the data is essentially just a regular data frame that we can use our normal functions on.

It's also good to know which coordinate reference system your data uses, because if you are layering multiple datasets, the CRS needs to be consistent. Common CRS include NAD83 (for the United States only) and WGS84 (global). You can convert between these if need be.

```{r}
st_crs(mn_cities)
```

Our MN cities data uses NAD83 / UTM zone 15 datums. Let's convert that to regular NAD83, which is more likely to match other data. We can do this using the st_transform function.

```{r}
mn_cities <- mn_cities %>%
st_transform(crs = "NAD83")

st_crs(mn_cities)
```

Now we know that if we wanted to add another layer to our map, we'd need to be in NAD83 as well, or we'd need convert this data to a different CRS. Let's choose a map of MN counties to plot under our cities, so that we can see the shape of Minnesota. We can get these from the "USAboundaries" package.

```{r}
#load data
mn_counties <- us_counties(resolution = "high", states = "Minnesota")

#clean out duplicate column names so we can filter later
names_counties <- names(mn_counties)
names(mn_counties)[names_counties == 'state_name'] <- c("state_name1", "state_name2")

#check CRS
st_crs(mn_counties)
```

Our county data used the WGS84 coordinate reference system, so we need to convert it to NAD83 before we use it with our city data.

```{r}
mn_counties <- mn_counties %>%
  st_transform(crs = "NAD83")

st_crs(mn_counties)
```

#### Constructing a basic map using ggplot

A basic map in sf consists of a `ggplot()` base and `geom_sf()` layers. Unlike with most ggplots, you don't need to include any aesthetics or data in the ggplot line. You'll specify the data and aesthetics separately for each `geom_sf` layer that you add. X and y are pre-defined by your geometry columns, so you only need to specify other aesthetics in your `geom_sf()` layers.

The order in which you add layers matters! Think of it as building a map from the bottom up. The layers you have further down in your code will appear on top of the layers at the top of your code.

```{r}
ggplot() + #plot frame
  geom_sf(data = mn_counties) + #county boundary layer
  geom_sf(data = mn_cities) #city point layer
```

#### Customizing your map

Okay, we have a basic map! Let's make that look nicer. Also, I'll filter so that we only have cities with populations over 5,000. I can filter within my `geom_sf()` line, which is really convenient. We could also choose to color the cities by their population using `aes()` within `geom_sf`:

```{r}
ggplot() +
  geom_sf(data = mn_counties, fill = 'wheat', color = "tan") + #establishing my counties basemap
  geom_sf(data = mn_cities %>% filter(Population >= 5000), mapping = aes(color = Population), alpha = 0.8)+ #cities layer
  scale_color_viridis_c() + #continuous (gradient) color scale
  labs(title = "Minnesota Cities with Population >= 5,000") + 
  theme_classic() + 
  theme(axis.line=element_blank(), #remove axis lines
        axis.text=element_blank(), #remove axis text (latitudes and longitudes)
        axis.ticks=element_blank()) #remove axis tick marks
```


#### Zooming in by filtering data

Can't see much there, so let's zoom in on the Twin Cities area by choosing only a few counties. We can simply filter the county data by name. You could also zoom by specifying `xlim()` or `ylim()` for your ggplot, if you know which coordinate system is being used. In this case you'd use longitude and latitude as your x and y limits respectively.

```{r}
ggplot() +
  geom_sf(data = mn_counties %>%
            filter(name %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott") ), fill = 'wheat', color = "tan") + 
  geom_sf(data = mn_cities %>% filter(Population >= 5000), mapping = aes(color = Population), alpha = 0.8)+ 
  scale_color_viridis_c() +
  labs(title = "Minnesota Cities with Population >= 5,000") + 
  theme_classic() + 
  theme(axis.line=element_blank(), 
        axis.text=element_blank(), 
        axis.ticks=element_blank())
```

#### Zooming in by cropping data

In order to see our area of interest we also need to crop the city data. You can use the `st_crop()` function.

```{r}
cities_7countyarea <- st_crop(mn_cities,st_bbox(mn_counties %>% filter(name %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott"))))
```

```{r}
ggplot() +
  geom_sf(data = mn_counties %>%
            filter(name %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott") ), fill = 'wheat', color = "tan") + 
  geom_sf(data = cities_7countyarea %>% filter(Population >= 5000), mapping = aes(color = Population))+ 
  scale_color_viridis_c() +
  labs(title = "Minnesota Cities with Population >= 5,000") + 
  theme_classic() + 
  theme(axis.line=element_blank(), 
        axis.text=element_blank(), 
        axis.ticks=element_blank())
```


### Chloropleth maps 

Choropleth maps are probably the most commonly made thematic maps. They're easily created using ggplot by filling areas (sf polygon geometries) according to the value of a variable of interest. Choropleth maps can use either unclassed or classed numeric data depending on the goal of the map, and there are several different classification methods that can be used.

To explore how to create choropleth maps, let's use the example of county population data for Minnesota. We already have the `mn_counties` spatial data from the previous tutorial, so we just need to download some data on populations. Run the following code:

```{r}
#read data
population <- read_csv("PopulationReport.csv") 

#clean data
colnames(population) <- population[1,]
population <- population[-c(1:2, 90:92),]
names_pop <- names(population)
names(population)[names_pop == 'NA'] <- c("NA1", "NA2")
population <- population %>%
  select(-c(NA1, NA2))

#join with county boundary data
county_population <- mn_counties %>% 
  left_join(population, by = c("geoid" = 'FIPS*')) %>% #when joining a spatial and a non-spatial dataset, the spatial one should always come first! Here, that's our "mn_counties" data
  select(`County name`, geometry, `Change 2020-21`) %>% 
  mutate(chng_2021 = as.numeric(gsub("%", "",`Change 2020-21`)))
```

#### Creating an unclassed (gradient) choropleth map

Unclassed choropleth maps will have a color gradient in the legend, and no two polygons will be filled in the same color unless they have the same value of the variable of interest. Using an unclassed scheme is great for when you want to show a general theme or pattern in data with fairly even distribution. For example, when we run the code for the map below, we see that counties in the suburbs of the Twin Cities, as well as the North Central region of the state, are experiencing the highest population growth. We don't need to class this data in order to see the trends.

In order to build a choropleth map, we use the same structure as the "basic map": a ggplot base with a geom(sf) layer containing our data and our aesthetics, which specifies which variable to fill by. Then we have our color scheme (you want a continuous color scheme here, or you can specify a gradient using `scale_fill_gradientn()` ).

```{r}
ggplot() +
  geom_sf(data = county_population, aes(fill=chng_2021)) + #specifying which data to use and which variable to fill by
  scale_fill_viridis_c() + #continuous color scheme
  labs(title = "Population Change in Minnesota Counties from 2020 to 2021", fill = "Percent Change in Population")+
  theme_classic() +
  theme(axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank()) #remove axis information
```

#### Creating a classed choropleth map

There are times when it makes more sense to class your data for a choropleth map. This might be wise if you have outliers that you want to keep in or if you're attempting to highlight a more specific spatial pattern or group.

There are several ways to classify your data for a choropleth map. You can use cut() and manually specify your breaks, which might be a good idea if you know the specific distribution of your data or if you're aiming to highlight a certain pattern. There are also classification schemes that are widely used by cartographers and which are available in the classInt package. Some of the most common ones include:

Jenks Natural Breaks: Finds the natural breaks in the distribution of your data and classes according to those. This might be good if it's important to keep clusters together in highly clustered data, but you can end up with some wildly different-sized classes. Use style = "jenks".

Quantiles: Creates categories with equal numbers of data points. This is great for making maps look balanced and interpretable, but it might not work well with the distribution of your data. Use style = "quantile".

Equal interval: Creates categories of equal width. This is the most easily interpretable method, but often doesn't bring out natural patterns in the data. Use style = "equal".

```{r}
#create breaks using the quantile method with 5 classes
breaks_qt <- classIntervals(c(min(county_population$chng_2021) - .00001, county_population$chng_2021), n = 5, style = "quantile")

#use cut() and the breaks we created to make a classed variable
county_population <- county_population %>%
  mutate(chng_2021_cat = factor(cut(chng_2021, breaks = breaks_qt$brks)))
```


```{r}
#classed choropleth map
ggplot() +
  geom_sf(data= county_population, aes(fill=chng_2021_cat)) + #add your data and specify aesthetics in the same way as for an unclassed map
  scale_fill_viridis_d() + #you need a discrete color scale here, or you can specify your own colors
  labs(title = "Population Change in Minnesota Counties from 2020 to 2021", fill = "Percent Change in Population")+
  theme_classic() +
  theme(axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())
```

You can really see the difference between the classed and unclassed maps. The classed version emphasizes the pattern of Hennepin and Ramsey counties declining in population while the surrounding counties grow in population. It's easy to play around with classification schemes until you find one that tells the story you want to see, but it's important to be honest with your data and make sure that your map isn't obscuring reality. It's also important to consider what spatial unit you're using (here we have counties) to make sure that aggregated values are appropriate for your topic. Sometimes it makes more sense to use a larger or smaller spatial unit than what you might think.


### Joining and aggregating spatial data

#### Load the data

This set of examples will use data on domestic and public drinking wells with at least one sample, which we collect below from the Minnesota Pollution Control Agency (MPCA). We will look at these drinking wells on the county level, so please download the *shapefile* folder from the [Minnesota Geospatial Commons](https://gisdata.mn.gov/dataset/bdry-counties-in-minnesota) site and change the file path below to fit your needs.

```{r}
# domestic and public drinking wells with at least one sample
stationList <- read_csv("https://services.pca.state.mn.us/api/v1/groundwater/monitoring-stations?stationType=Well&format=csv") %>%
  filter(stationPurpose %in% c("Domestic Drinking", "Public Drinking"), sampleCount>0) 

# county boundaries for minnesota
county_boundaries <- st_read("shp_bdry_counties_in_minnesota/mn_county_boundaries_500.shp")
```

#### Make sure CRS are consistent 

Before joining spatial data, we need to make sure that the data we are joining have consistent coordinate reference systems. For this dataset, we are using NAD83. It also important to check data missing a latitude and longitude. 

```{r}
# clean well data
station_points <- stationList %>% 
  filter(lat > 0, long <0) %>% # remove wells with a missing latitude and longitude
  st_as_sf(coords = c("long", "lat"), crs = "NAD83")

# check CRS of station_points: NAD83
st_crs(station_points)
st_crs(county_boundaries) # need to be transformed

# transform county boundaries to NAD83
county_boundaries <- st_transform(county_boundaries, crs = "NAD83")
```

#### Complete the join

Now that we have county boundaries, we can match each drinking well to its appropriate county using a spatial join. Both the `station_points` and `county_boundaries` datasets have a `geometry` column (POINT for the wells, POLYGON for the counties) and the `st_join()` matches to point to the right polygon. Now we know what county each well is located in. 

```{r}
joined <- st_join(station_points, county_boundaries) 
head(joined)
```


#### Aggregation 

Now we can count how many wells are in each station with a simple `group_by()` as shown below. 

```{r}
stations_per_county <- joined %>%
  st_drop_geometry() %>% #removes geometry - makes calculation more efficient 
  group_by(CTY_NAME) %>%
  count() 
head(stations_per_county)
```

Check out how many stations we have per county 

```{r}
# looks like the max is much higher than the 75% quantile
summary(stations_per_county$n)

# check for outliers on the high side
stations_per_county %>%
  arrange(desc(n)) %>%
  head()

# make an indicator variable for the high well county
stations_per_county$high_wells <- "1,000+"
stations_per_county$high_wells[stations_per_county$n <= 1000] <- NA
```

Make the chloropleth map with aggregated data.

```{r}
stations_per_county_geo <- county_boundaries %>% # shape file with geometry goes first
  left_join(stations_per_county, by = "CTY_NAME")
  
ggplot() +
  geom_sf(data= subset(stations_per_county_geo, n<1000), aes(fill=n)) + 
  scale_fill_gradientn(colours = c("lightcyan", "lightcyan2", "lightskyblue3", "lightskyblue4"))+
  geom_sf(data = subset(stations_per_county_geo, n>1000),aes(color=high_wells), fill = "dodgerblue4")+
  labs(fill = "Wells", color = "", title = "Number of domestic/public drinking wells by Minnesota county", subtitle= "with at least one MPCA sample since 1988")+
  theme_classic()+
  theme(axis.line = element_blank(), 
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "bottom", 
        plot.title.position = "plot", 
        plot.title = element_text(size = 8), 
        plot.subtitle = element_text(size = 8))
```

### Crop and overlay shape files

With a map, we can overlay shape files (such as roads, rivers, and lakes) and crop and them to fit our area of interest.

Start by downloading a shape file that you are interested in. For example, search "Minnesota roads shape file". For this example, visit [this site](https://catalog.data.gov/dataset/tiger-line-shapefile-2019-state-minnesota-primary-and-secondary-roads-state-based-shapefile) and download the Shapefile Zip File. Load in the shapefile (adjusting the file path as needed) using `st_read()`.

```{r}
roads <- st_read("tl_2019_27_prisecroads")
```

Add the shape file to the plot from above using the code `geom_sf(data = roads, fill = "gray",color = "gray", lwd= 0.2)`.

```{r}
ggplot() +
  geom_sf(data= subset(stations_per_county_geo, n<1000), aes(fill=n)) + 
  scale_fill_gradientn(colours = c("lightcyan", "lightcyan2", "lightskyblue3", "lightskyblue4"))+
  geom_sf(data = subset(stations_per_county_geo, n>1000),aes(color=high_wells), fill = "dodgerblue4")+
  geom_sf(data = roads, fill = "gray",color = "gray", lwd= 0.2)+ #adding the shape file in this line
  labs(fill = "Wells", color = "", title = "Number of domestic/public drinking wells by Minnesota county", subtitle= "with at least one MPCA sample since 1988")+
  theme_classic()+
  theme(axis.line = element_blank(), 
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "bottom", 
        plot.title.position = "plot", 
        plot.title = element_text(size = 8), 
        plot.subtitle = element_text(size = 8))
```

The prior shapefile matches our map perfectly, but say we wanted to plot just the seven county metropolitan area with the following map. Doing this, we can't really see what we want. 

```{r}
# filter for counties of interest
stations_per_county_geo7 <- stations_per_county_geo %>%
  filter(CTY_NAME %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott"))

ggplot() +
  geom_sf(data= subset(stations_per_county_geo7, n<1000), aes(fill=n)) + 
  scale_fill_gradientn(colours = c("lightcyan", "lightcyan2", "lightskyblue3", "lightskyblue4"))+
  geom_sf(data = subset(stations_per_county_geo7, n>1000),aes(color=high_wells), fill = "dodgerblue4")+
  geom_sf(data = roads, fill = "gray",color = "gray", lwd= 0.2)+
  labs(fill = "Wells", color = "", title = "Number of domestic/public drinking wells by Minnesota county", subtitle= "with at least one MPCA sample since 1988")+
  theme_classic()+
  theme(axis.line = element_blank(), 
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "bottom", 
        plot.title.position = "plot", 
        plot.title = element_text(size = 8), 
        plot.subtitle = element_text(size = 8))
```

We can fix this with `st_crop()` where we provide our area of interest. We can now more easily see the area we are interested in. 

```{r}
roads_sub <- st_crop(roads,st_bbox(county_boundaries %>% filter(CTY_NAME %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott"))))

ggplot() +
  geom_sf(data= subset(stations_per_county_geo7, n<1000), aes(fill=n)) + 
  scale_fill_gradientn(colours = c("lightcyan", "lightcyan2", "lightskyblue3", "lightskyblue4"))+
  geom_sf(data = subset(stations_per_county_geo7, n>1000),aes(color=high_wells), fill = "dodgerblue4")+
  geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.2)+
  labs(fill = "Wells", color = "", title = "Number of domestic/public drinking wells by Minnesota county", subtitle= "with at least one MPCA sample since 1988")+
  theme_classic()+
  theme(axis.line = element_blank(), 
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "bottom", 
        plot.title.position = "plot", 
        plot.title = element_text(size = 8), 
        plot.subtitle = element_text(size = 8))
```


### Labeling and customization

The maps we have created above are certainly nice, but what if we want to add labels to them, and customize them to be more visually appealing?

#### Visual Hierarchies and Customization

Customizing your maps is all about **visual hierarchy**; that is, how do you visually emphasize the important information on the map and ensure that your visualization looks nice and is easily interpretable? Some ways to emphasize important features or information include:

*Color choice. You reader's eyes will go to brighter, stronger colors first. Also, many color schemes are culturally associated with specific phenomena or with negative/positive reactions. For example in the US, a choropleth map colored on a gradient from blue to red will evoke US political parties. Colors like red, yellow, and orange tend to carry negative or alarming connotations, while cooler colors are more neutral.
*Font and font style. Bold fonts are great for titles and emphasizing important feature labels. 
*Symbols. You can differentiate between different types of point features by using different symbol shapes, which are available in the `shape` attribute of `geom_sf` layers.
*Legends. Your legend should be clear and informative. You can adjust the legend in `theme()` using `legend.justification`, `legend.box.background`, etc. You can create your own legend title as well. 

First, run `devtools::install_github("yutannihilation/ggsflabel")` in the console to install the `ggsflabel` package. The ggsflabel package makes it easy to label maps without unlisting the coordinates from the geometry like we did in the last example. Then, run this library statement:

```{r}
library(ggsflabel)
```


Let's look at some water quality data for the twin cities. Run the following code to read in and clean some data:

```{r}
#read in fecal coliform bacteria concentration data
miss_river_fcb <- read_csv('miss_fcb.csv') %>%
  st_as_sf(coords = c("long", "lat"), crs = "+proj=longlat +datum=NAD83") 

#read in state border data
mn_wi_states <- us_states(resolution = "high", states = c("Minnesota", "Wisconsin")) %>%
  st_transform(crs = "NAD83") %>% #transform CRS
  mutate(x_nudge = case_when(state_name == 'Minnesota' ~ 1,  #these are nudge values -- play around with your map and see which values place your labels where you want them
                             state_name == 'Wisconsin' ~ -1), 
         y_nudge = case_when(state_name == 'Minnesota' ~ -1.7, 
                            state_name == 'Wisconsin' ~ 0))

#read in city location data
mn_twin_cities <- read_sf('shp_loc_pop_centers') %>%
  filter(Name %in% c("Minneapolis", "St. Paul")) %>%
  st_transform(crs = "NAD83") %>% 
  mutate(x_nudge = case_when(Name == 'Minneapolis' ~ 0, #nudge values
                             Name == 'St. Paul' ~ .1), 
         y_nudge = case_when(Name == 'Minneapolis' ~ .05, 
                            Name == 'St. Paul' ~ .05))

#county data
counties <- us_counties(resolution = "high", states = c("Minnesota", "Wisconsin")) %>%
  st_transform(crs = "NAD83")

#river shapefile
rivers <- read_sf('shp_water_lakes_rivers')

#title legend
legend_title <- "FCB per 100 mL"
```


And now we can create a pretty, customized map. Run the following code:

```{r}
ggplot() + #ggplot frame
  geom_sf(data = counties, color = "navajowhite", fill = "ivory", size = 0.5) + #add county boundaries
  geom_sf(data = mn_wi_states, color = "tan3", fill = "NA") + #add state boundaries
  geom_sf(data = mn_twin_cities, color = "black", size = 3, shape= 15) + #add twin cities
  geom_sf(data = rivers %>% filter(NAME_DNR == "Mississippi"),color = "NA", fill = 'cornflowerblue') +  #add river
  geom_sf_label_repel(data = mn_twin_cities, aes(label = Name), nudge_x = mn_twin_cities$x_nudge, nudge_y=mn_twin_cities$y_nudge) + #add city labels using nudge values from above. geom_sf_label_repel adds labels in boxes.
  geom_sf(data = miss_river_fcb, mapping = aes(color = fct_reorder(NA2Cat, NA2)), size = 2.5)+ #add thematic layer -- Fecal coliform levels
  scale_color_manual(legend_title, values = c("mediumseagreen", "gold", "orange1","red2"))+ #color scheme and legend title
  coord_sf(xlim = c(-93.41, -92.1), ylim= c(44.4, 45.2)) + #zoom into this specific long-lat area
  geom_sf_text_repel(data = mn_wi_states, min.segment.length = Inf, color = "tan3", aes(label = state_name), size = 5, nudge_y = mn_wi_states$y_nudge, nudge_x = mn_wi_states$x_nudge)+ #add state labels using nudge values from above. geom_sf_text_repel adds text without label boxes.
  labs(x = "", y = "", title = "Fecal Coliform Bacteria (FCB) Levels in the Mississippi River", subtitle = "Data from 2019 and 2020 at 34 monitoring stations in Southeastern Minnesota", caption = "Plot by Vivian Powell | Data from Metropolitan Council EIMS") +
  annotation_scale(location = "bl")+ #add scale bar (from `ggspatial` package)
  theme_classic() +
  theme(legend.position = c(.95, .95), 
    legend.justification = c("right", "top"),
    legend.box.background = element_rect(color="black", size=1), #create a legend rectangle with a black border
    legend.text = element_text(size = 7),
    legend.title = element_text(size = 8, face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5), 
    plot.subtitle = element_text(hjust = 0.5),
    plot.caption = element_text(hjust = 0.5),
    axis.line=element_blank(),
    axis.text=element_blank(),
    axis.ticks=element_blank())
```

Now you're equipped to make your own spatial visualizations using the sf package and ggplot!


# Exercises 

The following exercises will use census tract `tidycensus` data for the Hennepin and Ramsey county. We provide several variables you can choose from in order to create maps that best fit your interest.

Load the data with the following code:

```{r, message=FALSE, warning=FALSE, echo=FALSE}
census2020 <- get_acs(year = 2020, state = "MN", geography = "tract", variables = c(	
"B01003_001", "B19013_001", "B23006_023", "B25058_001", "B25107_001", "B25003_001", "B25003_002", "B25003_003", "B25077_001"), output = 'wide', geometry = TRUE) %>%
  filter(word(NAME, 4) %in% c("Ramsey", "Hennepin"))%>%
               mutate(tract = word(NAME, 3),
                      tract = str_remove(tract, ","),
                      county = word(NAME, 4)) %>%
               select(-NAME) %>%
               rename("population" = "B01003_001E", 
                      "medianIncome" = "B19013_001E", 
                      "bachelors" = "B23006_023E",
                      "medContractRent" = "B25058_001E", 
                      "tenureTotal" = "B25003_001E", 
                      "tenureOwned" = "B25003_002E", 
                      "tenureRented" = "B25003_003E",
                      "medianHomeValue"= "B25077_001E") %>%
  select(-contains("_"))

crashes <- read_csv("Pedestrian_and_Bike_Crash_Dataset__.csv") %>%
  filter(!is.na(Latitude), !is.na(Longitude))
```

### Exercise 1: Joining and aggregation

**Create a map of crashes per census tract in Ramsey county.** 

First, transform the `crashes` data to have a point geometry using the code below. 

```{r}
crashes <- st_as_sf(crashes, coords = c("Longitude", "Latitude"), crs = "NAD83")
```

Check the coordinates of `census2020` and `crashes` using `st_crs()`.

```{r}
#code here
```

Join the crashes and census dataset together and count the number of crashes per census tract.

```{r, eval=FALSE}
crashes_per_tract <- st_join(...) %>%
  st_drop_geometry() %>% #removes geometry - makes calculation more efficient 
  group_by(...) %>%
  count() 
```

Join the census data with `crashes_per_tract`.

```{r, eval=FALSE}
crashes_per_tract_geo <- ... %>% # shape file with geometry goes first
  left_join(..., by = ...)
```

Create the plot!! Use a filter of `n>0` on the `crashes_per_tract_geo` data to only show the census tracts where crashes were recorded instead of all of Ramsey and Hennepin County. 

```{r, eval=FALSE}
ggplot() +
  geom_sf(...)+
  scale_fill_gradientn(colours = c("lightcyan", "lightcyan2", "lightskyblue3", "lightskyblue4"))+
  labs(fill = "Crashes", color = "", title = "Number of pedestrian crashes per census tract")+
  theme_classic()+
  theme(axis.line = element_blank(), 
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "bottom", 
        plot.title.position = "plot", 
        plot.title = element_text(size = 8), 
        plot.subtitle = element_text(size = 8))
```


### Exercise 2: Adding layers

**Plot a variable of your choice for census tracts in Hennepin and Ramsey County and add roads to the map.**

Start by using `st_crop()` to crop the roads map to the area we are interested in (Hennepin and Ramsey County).

```{r, eval=FALSE}
roads_sub <- st_crop(...)
```

Create the map!!

```{r, eval=FALSE}
ggplot() +
  geom_sf(...)+ #put census tracts on map and fill by variable of interest
  geom_sf(... ,fill = "gray", color = "gray", lwd = 0.2)+ #roads data here
  labs(...)+ # add labels to fit your variables 
  scale_fill_gradientn(colours = c("lightcyan", "lightcyan2", "lightskyblue3", "lightskyblue4"))+ # change to preferred color palette
  theme_classic()+
  theme(axis.line = element_blank(), 
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "bottom", 
        plot.title.position = "plot", 
        plot.title = element_text(size = 8), 
        plot.subtitle = element_text(size = 8))
```


### Bonus exercise: Map design (if you have time)

**Add some labels, a legend, a title, a scale bar, and credits to your map from Exercise 2. Design your map using visual hierarchy principles!**


